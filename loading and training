# importing necessary libraries
import numpy as np
import os
import matplotlib.pyplot as plt
import tensorflow as tf
import PIL
import pathlib
from tensorflow import keras
from tensorflow.keras import layers, models

#loading the data
image_size = 100, 100
batch_size = 32

train_ds, val_ds = tf.keras.utils.image_dataset_from_directory(
    "C:/Users/aaminaz/OneDrive/Documents/DLdata2",
    labels = "inferred",
    label_mode = 'int',
    color_mode = "rgb",
    shuffle = True,
    validation_split=0.2,
    subset="both",
    seed=1337,
    image_size=image_size,
    batch_size=batch_size)
# total files: 1964
# train_ds: 1572
# val_ds: 392

train_classnames = train_ds.class_names
val_classnames = val_ds.class_names

# the class names are "Apple Braeburn" and "Banana"

# plotting the data
plt.figure(figsize = (15 ,15))
for images, labels in train_ds.take(8):#take() returns images in given positional indices along the axis
    for i in range(14):
        ax = plt.subplot(4, 4, i + 1)
        plt.imshow(images[i].numpy().astype("uint8")) #imshow() creates an image from a 2d numpy array
        # unit8 is an unsigned integer ranging from 0 to +255
        plt.title(train_classnames[labels[i]])
        plt.axis("off")

# processing the data
AUTOTUNE = tf.data.AUTOTUNE

train_ds = train_ds.cache().prefetch(buffer_size = AUTOTUNE)
val_ds = val_ds.cache().prefetch(buffer_size = AUTOTUNE)

# adding layers and compling the model
img_height = 100
img_width = 100
num_classes = 2

def cnnmodel(dr = 0.3, lr = 0.001, act = 'relu'):
    model = models.Sequential([
        layers.Rescaling(1./255),
        layers.Conv2D(32, 3, activation=act),
        layers.MaxPooling2D((2,2)),
        layers.Dropout(dr),
        layers.Conv2D(64, 3, activation=act),
        layers.MaxPooling2D((2,2)),
        layers.Dropout(dr),
        layers.Conv2D(128, 3, activation=act),
        layers.MaxPooling2D((2,2)),
        layers.Flatten(),
        layers.Dense(128, activation = act),
        layers.Dense(num_classes)
    ])
    
    model.compile(optimizer = keras.optimizers.Adam(lr),
             loss = 'binary_crossentropy',
             metrics = ['accuracy'])
    
    return model

#traing the model

model = cnnmodel()
epochs = 10
model.fit(train_ds, epochs= epochs)

# printing the loss and accuracy


(loss, accuracy) = model.evaluate(val_ds)
print(loss)
print(accuracy)
# loss: 7.66
# accuracy: 0.5

model.save('model.h9')
