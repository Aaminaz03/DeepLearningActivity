import numpy as np
import os
import matplotlib.pyplot as plt
import tensorflow as tf
import PIL
import pathlib
from tensorflow import keras
#from tensorflow.keras import layers
from tensorflow.keras import layers, models

import gradio as gr

image_size = 100, 100
batch_size = 32

from google.colab import drive
drive.mount('/content/drive')

batch_size = 32
img_size = (100, 100)

train_dataset = tf.keras.preprocessing.image_dataset_from_directory(
    '/content/drive/MyDrive/dldata/dlimg',
     shuffle=True, batch_size=batch_size, image_size=img_size,
    validation_split=0.2, subset='training', seed=42
)
valid_dataset = tf.keras.preprocessing.image_dataset_from_directory(
    '/content/drive/MyDrive/dldata/dlimg',
    shuffle=True, batch_size=batch_size, image_size=img_size,
    validation_split=0.2, subset='validation', seed=42
)
test_dataset = tf.keras.preprocessing.image_dataset_from_directory(
    '/content/drive/MyDrive/dldata/dlimg',
    shuffle=True, batch_size=batch_size, image_size=img_size
)

class_names = train_dataset.class_names
print(class_names)

plt.figure(figsize = (15 ,15))
for images, labels in train_dataset.take(8):#take() returns images in given positional indices along the axis
    for i in range(14):
        ax = plt.subplot(4, 4, i + 1)
        plt.imshow(images[i].numpy().astype("uint8")) #imshow() creates an image from a 2d numpy array
        # unit8 is an unsigned integer ranging from 0 to +255
        plt.title(class_names[labels[i]])
        plt.axis("off")

num_classes=2

def cnnmodel(lr=0.001):
    model = models.Sequential([
        layers.Rescaling(1./255),
        layers.Conv2D(32, 3, activation='relu'),
        layers.BatchNormalization(),
        layers.MaxPooling2D((2, 2)),
        layers.Dropout(0.5),
        layers.Conv2D(64, 3, activation='relu'),
        layers.BatchNormalization(),
        layers.MaxPooling2D((2, 2)),
        layers.Conv2D(128, 3, activation='relu'),
        layers.BatchNormalization(),
        layers.MaxPooling2D((2, 2)),
        layers.Flatten(),
        layers.Dense(128, activation='relu'),
        layers.Dropout(0.5),  # Adjust dropout rate
        layers.Dense(num_classes)
    ])

    model.compile(optimizer=keras.optimizers.Adam(lr),
                  loss='sparse_categorical_crossentropy',
                  metrics=['accuracy'])

    return model

model = cnnmodel()
epochs=10
history = model.fit(train_dataset, epochs=epochs, validation_data=valid_dataset)

# printing the loss and accuracy
(loss, accuracy) = model.evaluate(valid_dataset)
print(loss)
print(accuracy)
# loss: 0.0919
# accuracy: 0.9184

model.save('model.h9')



